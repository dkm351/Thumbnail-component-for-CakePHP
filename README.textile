*Attachment component for CakePHP* handles file uploads to the file system. If
it's an image file, it creates thumbnail copies in
@/app/webroot/attachments/photos/{required_sizes}@ folder; while other files
are stored in @/app/webroot/attachments/files@.

I've started it from the public copy at
"@http://sabbour.wordpress.com/2008/07/18/enhanced-image-upload-component-for-cakephp-12/@":http://sabbour.wordpress.com/2008/07/18/enhanced-image-upload-component-for-cakephp-12/
to have a standard way of uploading files to CakePHP projects.


h2. Usage & code examples

# Copy @attachment.php@ to @/app/controllers/components/@
# Add component to your controller: @var $components = array('Attachment');@
# Add DB columns (as noted below).
# In your upload form:
## @echo $form->create('Model', array('type' => 'file'));@
## @echo $form->file('pet'); // pet is the lower case model-name@

We'll asume a Model named 'Pet' for a sample installation. The code relies on
four columns: @pet_file_path, pet_file_name, pet_file_size@ and
@pet_content_type@, which are automagically updated when you call from the
controller *(before @save()@ action)*:

@$this->Attachment->upload($this->data['Pet']);@

You may choose different column prefixes than the model name, as long as you
specify it on the upload method, like so:

@$this->Attachment->upload($this->data['Pet'], 'dog');@

h3. Access files from the view

For images: @<?= $html->image('/attachments/files_dir/{size}/' . $data['Pet']['pet_file_path']); ?>@
For files:  @<?= $html->link('Grab file', '/attachments/files_dir/' . $data['Pet']['pet_file_path']); ?>@

h3. Code for showing validation errors in the view

@if(isset($form->validationErrors)) {
	foreach ($form->validationErrors as $model => $columns) {
		foreach ($columns as $err_msg) {
			echo $html->div('error-message', $err_msg);
		}
	}
}@

Only for the file input:

@if (isset($form->validationErrors['Pet']['pet_file_name'])) {
	echo $html->div('error-message', $form->validationErrors['Pet']['pet_file_name']);
}@

h2. Configuration options (default values between parentheses)

* @files_dir@: Where to save the files (inside @/app/webroot/attachments/@) (@photos@).
* @rm_tmp_file@: Remove temporal image after resizing (@false@).
* @allow_non_image_files@, self descriptive ;-) (@true@).
* @default_col@: Column prefix for file related data (lowercase modelname).
* @images_size@: Array of different file sizes required by your app. Each
  element is itself an array, like:
    @'folder_name' => array($width, $height, $crop)@.
  You may define only width or height, and the image will scale appropriately.

You can override the default configuration passing an array of options while
including the component, like:
@var $components = array('Attachment' => array(
	'files_dir' => 'pets',
	'images_size' => array(
		'avatar'  => array(75, 75, true)
	)
));@

h2. Methods

h3. upload($data)

* @data@: raw data from form. If it's an image, it calls:

h3. thumbnail($data, $upload_dir, $maxw, $maxh, $crop = 'resize')

* @data@: image data array
* @upload_dir@: where to save the file (inside @attachments/files_dir@)
* @maxw/maxh@: maximum width/height for resizing images
* @crop@: Crop image? (one of @resize@, @resizeCrop@ or @crop@)

h3. delete_files($filename)

* @filename@: file-to-delete name

h2. Requirements

* PHP GD library installed and enabled.
* @/app/webroot/attachments/@ must be writable by the web server.

